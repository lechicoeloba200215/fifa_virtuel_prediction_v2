import pandas as pd
import sqlite3
import numpy as np
import streamlit as st
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager  

# üîç D√©tection automatique du fichier CSV
def charger_historique():
    chemins_possibles = [
        "/storage/emulated/0/files/donnee_dFIFA_3x3.csv",  # Stockage local Android
        "donnee_dFIFA_3x3.csv",  # Fichier local dans le m√™me dossier que le script
        "https://raw.githubusercontent.com/ton-repo/donnee_dFIFA_3x3.csv"  # URL GitHub
    ]

    for chemin_fichier in chemins_possibles:
        try:
            df = pd.read_csv(chemin_fichier)
            
            # V√©rifier que les colonnes attendues sont bien pr√©sentes
            colonnes_attendues = ["v1", "X", "v2", "R√©sultat", "1 Mi-Temps", "2 Mi-Temps"]
            if not all(col in df.columns for col in colonnes_attendues):
                st.error("‚ùå Erreur : Le fichier CSV ne contient pas toutes les colonnes n√©cessaires !")
                return pd.DataFrame()

            return df  # Fichier charg√© avec succ√®s
        
        except Exception:
            continue  # Essaye le prochain chemin si √©chec
    
    st.error("üö® Erreur : Fichier CSV introuvable dans tous les chemins test√©s !")
    return pd.DataFrame()

# üîç Scraping des cotes FIFA Virtuel avec Selenium
def scrape_cotes():
    url = "https://1xbet.com/fr/new-cyber/virtual/disciplines/fifa/champs/2665392-fc-24-3x3-international-masters-league"

    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")

    driver = webdriver.Chrome(ChromeDriverManager().install(), options=chrome_options)
    driver.get(url)

    try:
        equipes = driver.find_elements(By.CLASS_NAME, "nom-equipe-class")
        cotes = driver.find_elements(By.CLASS_NAME, "cote-class")

        if not equipes or not cotes:
            st.warning("‚ö†Ô∏è Impossible de r√©cup√©rer les cotes, v√©rifie la structure HTML du site.")
            return pd.DataFrame()

        data = [{"√âquipe": equipe.text, "Cote": float(cote.text)} for equipe, cote in zip(equipes, cotes)]

    except Exception as e:
        st.error(f"üö® Erreur lors du scraping : {e}")
        return pd.DataFrame()

    finally:
        driver.quit()

    return pd.DataFrame(data)

# üîÑ Sauvegarde des cotes en base SQLite
def sauvegarder_dans_db(df):
    if df.empty:
        st.warning("‚ùå Aucune donn√©e √† enregistrer !")
        return

    conn = sqlite3.connect("cotes_fifa.db")
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS cotes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        v1 REAL,
        X REAL,
        v2 REAL,
        resultat INTEGER,
        mi_temps_1 INTEGER,
        mi_temps_2 INTEGER,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')

    for _, row in df.iterrows():
        cursor.execute("INSERT INTO cotes (v1, X, v2, resultat, mi_temps_1, mi_temps_2) VALUES (?, ?, ?, ?, ?, ?)", 
                       (row["v1"], row["X"], row["v2"], row["R√©sultat"], row["1 Mi-Temps"], row["2 Mi-Temps"]))

    conn.commit()
    conn.close()

# üìä Pr√©diction avec XGBoost
def entrainer_modele():
    df = charger_historique()
    
    if df.empty:
        st.warning("‚ö†Ô∏è Pas assez de donn√©es pour entra√Æner le mod√®le !")
        return None

    X = df[["v1", "X", "v2"]]
    y = df["R√©sultat"]  # Pr√©diction du r√©sultat final

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = XGBClassifier()
    model.fit(X_train, y_train)

    return model

# üåç Interface Streamlit
st.title("üìä Analyse des Cotes FIFA Virtuel")

if st.button("Actualiser les cotes"):
    df_cotes = charger_historique()
    sauvegarder_dans_db(df_cotes)
    st.write("‚úÖ Donn√©es mises √† jour !")

if st.button("Pr√©dire un match"):
    model = entrainer_modele()
    if model:
        nouvelle_cote = np.array([[1.85, 3.10, 2.00]])  # Exemple de nouvelles cotes
        prediction = model.predict(nouvelle_cote)
        st.success(f"üîÆ R√©sultat pr√©dit : {prediction[0]}")
